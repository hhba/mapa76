require 'azure'
require 'aws-sdk'


class BaseAdapter
  def files
    Dir['dist/**/*'].reject {|fn| File.directory?(fn) }
  end

  def release_hash
    @release_hash ||= begin
      git_describe = `git describe`
      git_describe.split('-')[-1].strip
    end
  end
end

class S3Adapter < BaseAdapter
  def upload_latest
    upload
  end

  def upload_release
    upload(release_hash)
  end

  def upload(name='latest')
    `aws s3 sync dist/ s3://cdn.analice.me/#{name} --profile malev --region us-west-1 --acl public-read`
  end

  def delete(name)
  end
end

class AzureAdapter < BaseAdapter
  def initialize(opts={})
    Azure.config.storage_account_name = opts[:azure_storage_account]
    Azure.config.storage_access_key = opts[:storage_access_key]
    @azure_blob_service = Azure::BlobService.new
  end

  def upload_latest
    upload
  end

  def upload_release
    upload(release_hash)
  end

  def upload(origin, name='latest')
    files.each do |file|
      blob = "#{name}/#{file.split('/')[3..-1].join('/')}"
      azure_blob_service.create_block_blob(
        'aeolus',
        blob,
        File.open(file, "rb") { |f| f.read }
      )
    end

  end

  def delete(name)
  end
end

namespace :deploy do
  desc "Deploy assets to S3"
  task :s3 do
    adapter = S3Adapter.new
    adapter.upload_release
    adapter.upload_latest
    print adapter.release_hash
  end

  desc "Deploy assets to Azure"
  task :azure do
    adapter = AzureAdapter({
      azure_storage_account: ENV['AZURE_STORAGE_ACCOUNT'],
      storage_access_key: ENV['AZURE_STORAGE_ACCESS_KEY']
    })
    adapter.upload_release
    adapter.upload_latest
    print adapter.release_hash
  end

  desc "Remove batch of assets"
  task :delete, [:batch] do |t, args|
    puts "Remove everything #{batch}"
  end
end
